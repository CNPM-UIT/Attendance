// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApplication2.Data;

namespace WebApplication2.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("WebApplication2.Models.AnswerModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("QuestionId");

                    b.Property<int>("SelectionId");

                    b.Property<int?>("SubmissionModelId");

                    b.HasKey("Id");

                    b.HasIndex("SubmissionModelId");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("WebApplication2.Models.AttendanceModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AttendanceStatus");

                    b.Property<int?>("LessionModelId");

                    b.Property<int?>("StudentId");

                    b.HasKey("Id");

                    b.HasIndex("LessionModelId");

                    b.HasIndex("StudentId");

                    b.ToTable("Attendances");
                });

            modelBuilder.Entity("WebApplication2.Models.ClassModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClassCode");

                    b.Property<DateTime>("EndDate");

                    b.Property<string>("Name");

                    b.Property<int?>("SemesterId");

                    b.Property<DateTime>("StartDate");

                    b.Property<int>("StudentNumberLimit");

                    b.HasKey("Id");

                    b.HasIndex("SemesterId");

                    b.ToTable("Classes");
                });

            modelBuilder.Entity("WebApplication2.Models.DiscussionModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("LessionModelId");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.HasIndex("LessionModelId");

                    b.ToTable("Discussions");
                });

            modelBuilder.Entity("WebApplication2.Models.DocumentModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("LessionModelId");

                    b.Property<string>("Link");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("LessionModelId");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("WebApplication2.Models.LecturerMessageModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content");

                    b.Property<int?>("DiscussionModelId");

                    b.Property<int?>("LecturerId");

                    b.Property<DateTime>("Time");

                    b.HasKey("Id");

                    b.HasIndex("DiscussionModelId");

                    b.HasIndex("LecturerId");

                    b.ToTable("LecturerMessages");
                });

            modelBuilder.Entity("WebApplication2.Models.LecturerModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AcademicRank");

                    b.Property<int?>("ClassModelId");

                    b.Property<int?>("ClassModelId1");

                    b.Property<string>("FirstName");

                    b.Property<bool>("IsMale");

                    b.Property<string>("LastName");

                    b.Property<string>("LecturerCode");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ClassModelId");

                    b.HasIndex("ClassModelId1");

                    b.HasIndex("UserId");

                    b.ToTable("Lecturers");
                });

            modelBuilder.Entity("WebApplication2.Models.LessionModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ClassModelId");

                    b.Property<int?>("LecturerId");

                    b.Property<DateTime>("Time");

                    b.HasKey("Id");

                    b.HasIndex("ClassModelId");

                    b.HasIndex("LecturerId");

                    b.ToTable("Lessions");
                });

            modelBuilder.Entity("WebApplication2.Models.OptionModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content");

                    b.Property<int?>("QuestionModelId");

                    b.HasKey("Id");

                    b.HasIndex("QuestionModelId");

                    b.ToTable("Options");
                });

            modelBuilder.Entity("WebApplication2.Models.QuestionModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content");

                    b.Property<int>("Solution");

                    b.Property<int?>("TestModelId");

                    b.HasKey("Id");

                    b.HasIndex("TestModelId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("WebApplication2.Models.RateModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment");

                    b.Property<int?>("LessionModelId");

                    b.Property<int>("Rate");

                    b.Property<int?>("StudentId");

                    b.HasKey("Id");

                    b.HasIndex("LessionModelId");

                    b.HasIndex("StudentId");

                    b.ToTable("Rates");
                });

            modelBuilder.Entity("WebApplication2.Models.ReportModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment");

                    b.Property<int?>("LecturerMessageModelId");

                    b.Property<int?>("ReportPersonId");

                    b.Property<int?>("StudentMessageModelId");

                    b.HasKey("Id");

                    b.HasIndex("LecturerMessageModelId");

                    b.HasIndex("ReportPersonId");

                    b.HasIndex("StudentMessageModelId");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("WebApplication2.Models.SemesterModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<DateTime>("Year");

                    b.HasKey("Id");

                    b.ToTable("Semesters");
                });

            modelBuilder.Entity("WebApplication2.Models.StudentMessageModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content");

                    b.Property<int?>("DiscussionModelId");

                    b.Property<int?>("StudentId");

                    b.Property<DateTime>("Time");

                    b.HasKey("Id");

                    b.HasIndex("DiscussionModelId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentMessages");
                });

            modelBuilder.Entity("WebApplication2.Models.StudentModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Anonymous");

                    b.Property<string>("FirstName");

                    b.Property<bool>("IsMale");

                    b.Property<string>("LastName");

                    b.Property<string>("NickName");

                    b.Property<string>("StudentCode");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("WebApplication2.Models.SubmissionModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Point");

                    b.Property<int?>("StudentId");

                    b.Property<int?>("TestModelId");

                    b.Property<DateTime>("Time");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.HasIndex("TestModelId");

                    b.ToTable("Submissions");
                });

            modelBuilder.Entity("WebApplication2.Models.TestModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Deadline");

                    b.Property<int?>("LessionModelId");

                    b.Property<int>("Status");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("LessionModelId");

                    b.ToTable("Tests");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebApplication2.Models.AnswerModel", b =>
                {
                    b.HasOne("WebApplication2.Models.SubmissionModel")
                        .WithMany("Answers")
                        .HasForeignKey("SubmissionModelId");
                });

            modelBuilder.Entity("WebApplication2.Models.AttendanceModel", b =>
                {
                    b.HasOne("WebApplication2.Models.LessionModel")
                        .WithMany("Attendances")
                        .HasForeignKey("LessionModelId");

                    b.HasOne("WebApplication2.Models.StudentModel", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId");
                });

            modelBuilder.Entity("WebApplication2.Models.ClassModel", b =>
                {
                    b.HasOne("WebApplication2.Models.SemesterModel", "Semester")
                        .WithMany()
                        .HasForeignKey("SemesterId");
                });

            modelBuilder.Entity("WebApplication2.Models.DiscussionModel", b =>
                {
                    b.HasOne("WebApplication2.Models.LessionModel")
                        .WithMany("Discussions")
                        .HasForeignKey("LessionModelId");
                });

            modelBuilder.Entity("WebApplication2.Models.DocumentModel", b =>
                {
                    b.HasOne("WebApplication2.Models.LessionModel")
                        .WithMany("Documents")
                        .HasForeignKey("LessionModelId");
                });

            modelBuilder.Entity("WebApplication2.Models.LecturerMessageModel", b =>
                {
                    b.HasOne("WebApplication2.Models.DiscussionModel")
                        .WithMany("LecturerMessages")
                        .HasForeignKey("DiscussionModelId");

                    b.HasOne("WebApplication2.Models.LecturerModel", "Lecturer")
                        .WithMany()
                        .HasForeignKey("LecturerId");
                });

            modelBuilder.Entity("WebApplication2.Models.LecturerModel", b =>
                {
                    b.HasOne("WebApplication2.Models.ClassModel")
                        .WithMany("PracticalLecturers")
                        .HasForeignKey("ClassModelId");

                    b.HasOne("WebApplication2.Models.ClassModel")
                        .WithMany("TheoreticalLecturers")
                        .HasForeignKey("ClassModelId1");

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("WebApplication2.Models.LessionModel", b =>
                {
                    b.HasOne("WebApplication2.Models.ClassModel")
                        .WithMany("Lessions")
                        .HasForeignKey("ClassModelId");

                    b.HasOne("WebApplication2.Models.LecturerModel", "Lecturer")
                        .WithMany()
                        .HasForeignKey("LecturerId");
                });

            modelBuilder.Entity("WebApplication2.Models.OptionModel", b =>
                {
                    b.HasOne("WebApplication2.Models.QuestionModel")
                        .WithMany("Options")
                        .HasForeignKey("QuestionModelId");
                });

            modelBuilder.Entity("WebApplication2.Models.QuestionModel", b =>
                {
                    b.HasOne("WebApplication2.Models.TestModel")
                        .WithMany("Questions")
                        .HasForeignKey("TestModelId");
                });

            modelBuilder.Entity("WebApplication2.Models.RateModel", b =>
                {
                    b.HasOne("WebApplication2.Models.LessionModel")
                        .WithMany("Rates")
                        .HasForeignKey("LessionModelId");

                    b.HasOne("WebApplication2.Models.StudentModel", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId");
                });

            modelBuilder.Entity("WebApplication2.Models.ReportModel", b =>
                {
                    b.HasOne("WebApplication2.Models.LecturerMessageModel")
                        .WithMany("Reports")
                        .HasForeignKey("LecturerMessageModelId");

                    b.HasOne("WebApplication2.Models.StudentModel", "ReportPerson")
                        .WithMany()
                        .HasForeignKey("ReportPersonId");

                    b.HasOne("WebApplication2.Models.StudentMessageModel")
                        .WithMany("Reports")
                        .HasForeignKey("StudentMessageModelId");
                });

            modelBuilder.Entity("WebApplication2.Models.StudentMessageModel", b =>
                {
                    b.HasOne("WebApplication2.Models.DiscussionModel")
                        .WithMany("StudentMessages")
                        .HasForeignKey("DiscussionModelId");

                    b.HasOne("WebApplication2.Models.StudentModel", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId");
                });

            modelBuilder.Entity("WebApplication2.Models.StudentModel", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("WebApplication2.Models.SubmissionModel", b =>
                {
                    b.HasOne("WebApplication2.Models.StudentModel", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId");

                    b.HasOne("WebApplication2.Models.TestModel")
                        .WithMany("Submissions")
                        .HasForeignKey("TestModelId");
                });

            modelBuilder.Entity("WebApplication2.Models.TestModel", b =>
                {
                    b.HasOne("WebApplication2.Models.LessionModel")
                        .WithMany("Tests")
                        .HasForeignKey("LessionModelId");
                });
#pragma warning restore 612, 618
        }
    }
}
